/*
 * ZoomFrame.java
 *
 * Created on June 7, 2004, 9:37 PM
 */

package com.javaimagealbum;

import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ContainerEvent;
import java.awt.event.ContainerListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author  mroth
 * @author  Mirko Actis Grosso
 */
public class ZoomFrame extends javax.swing.JFrame implements ContainerListener, KeyListener {
    
    /** Default serial version */
    private static final long serialVersionUID = 1L;
    
    /** Creates new form ZoomFrame */
    public ZoomFrame() {
        initComponents();
        addKeyAndContainerListenerRecursively(this);
        
        setIconImage( new javax.swing.ImageIcon(
                getClass().getResource(
                "/com/javaimagealbum/images/icon.png")
                ).getImage());
        
        // Load cursors:
        ImageIcon openHandImageIcon = new ImageIcon(getClass().getResource(
                "/com/javaimagealbum/images/handopencursor.gif"));
        openHandCursor = Toolkit.getDefaultToolkit().createCustomCursor(
                openHandImageIcon.getImage(), new Point(8, 8), "openHand");
        
        ImageIcon closedHandImageIcon = new ImageIcon(getClass().getResource(
                "/com/javaimagealbum/images/" +
                "handclosedcursor.gif"));
        closedHandCursor = Toolkit.getDefaultToolkit().createCustomCursor(
                closedHandImageIcon.getImage(), new Point(8, 8), "closedHand");
        
        // For better wheel and scrollbar responsiveness
        spScroll.getVerticalScrollBar().setUnitIncrement(25);
        spScroll.getHorizontalScrollBar().setUnitIncrement(25);
        
        lblImage.setCursor(Cursor.getDefaultCursor());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        spScroll = new javax.swing.JScrollPane();
        lblImage = new javax.swing.JLabel();

        setTitle("Zoom");
        setBackground(java.awt.Color.white);
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        spScroll.setBackground(java.awt.Color.white);
        spScroll.setOpaque(false);
        lblImage.setBackground(new java.awt.Color(255, 255, 255));
        lblImage.setFont(new java.awt.Font("SansSerif", 0, 12));
        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblImageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                lblImageMouseReleased(evt);
            }
        });
        lblImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                lblImageMouseDragged(evt);
            }
        });

        spScroll.setViewportView(lblImage);

        getContentPane().add(spScroll, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void lblImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseReleased
        if(!loading) {
            lblImage.setCursor(openHandCursor);
        }
    }//GEN-LAST:event_lblImageMouseReleased
    
    private Point dragStart = null;
    private Point dragEnd = null;
    
    private void lblImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMousePressed
        if(!loading) {
            dragStart = evt.getPoint();
            int x = spScroll.getHorizontalScrollBar().getValue();
            int y = spScroll.getVerticalScrollBar().getValue();
            lblImage.setCursor(closedHandCursor);
        }
    }//GEN-LAST:event_lblImageMousePressed
    
    private void lblImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseDragged
        if(!loading) {
            dragEnd = evt.getPoint();
            int x = spScroll.getHorizontalScrollBar().getValue();
            int y = spScroll.getVerticalScrollBar().getValue();
            spScroll.getHorizontalScrollBar().setValue(
                    x - (dragEnd.x - dragStart.x));
            spScroll.getVerticalScrollBar().setValue(
                    y - (dragEnd.y - dragStart.y));
        }
    }//GEN-LAST:event_lblImageMouseDragged
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblImage;
    private javax.swing.JScrollPane spScroll;
    // End of variables declaration//GEN-END:variables
    
    private BufferedImage image;
    private ImageIcon imageIcon = new ImageIcon();
    private File prevFile = null;
    
    private Cursor openHandCursor;
    private Cursor closedHandCursor;
    private boolean loading = true;
    
    public void setImage(final File file) {
        if(prevFile != file) {
            prevFile = file;
            loading = true;
            this.lblImage.setText("Loading...");
            this.lblImage.setIcon(null);
            this.lblImage.setCursor(Cursor.getDefaultCursor());
            if(image != null) {
                image.flush();
                image = null;
            }
            new Thread() {
                public void run() {
                    try {
                        image = GUIUtils.loadImageFromFile(file, image, null,
                                null);
                        SwingUtilities.invokeLater(
                                new Runnable() {
                            public void run() {
                                loading = false;
                                imageIcon.setImage(image);
                                lblImage.setText("");
                                lblImage.setCursor(openHandCursor);
                                lblImage.setIcon(imageIcon);
                            }
                        });
                    } catch(IOException e) {
                        lblImage.setText("Image not found.");
                    } catch (OutOfMemoryError e){
                        lblImage.setText("Image too big. Out of Java heap space.");
                    }
                }
            }.start();
        }
    }
    
    /** The following function is recursive and is intended for internal use only. It is private to prevent anyone calling it from other classes
     * The function takes a Component as an argument and adds this Dialog as a KeyListener to it.
     * Besides it checks if the component is actually a Container and if it is, there  are 2 additional things to be done to this Container :
     *  1 - add this Dialog as a ContainerListener to the Container
     *  2 - call this function recursively for every child of the Container.
     */
    private void addKeyAndContainerListenerRecursively(Component c) {
        //To be on the safe side, try to remove KeyListener first just in case it has been added before.
        //If not, it won't do any harm
        c.removeKeyListener(this);
        //Add KeyListener to the Component passed as an argument
        c.addKeyListener(this);
        
        if(c instanceof Container){
            //Component c is a Container. The following cast is safe.
            Container cont = (Container)c;
            
            //To be on the safe side, try to remove ContainerListener first just in case it has been added before.
            //If not, it won't do any harm
            cont.removeContainerListener(this);
            //Add ContainerListener to the Container.
            cont.addContainerListener(this);
            
            //Get the Container's array of children Components.
            Component[] children = cont.getComponents();
            
            //For every child repeat the above operation.
            for(int i = 0; i < children.length; i++){
                addKeyAndContainerListenerRecursively(children[i]);
            }
        }
    }
    
    
    /** The following function is the same as the function above with the exception that it does exactly the opposite - removes this Dialog
     * from the listener lists of Components. */
    private void removeKeyAndContainerListenerRecursively(Component c) {
        c.removeKeyListener(this);
        
        if(c instanceof Container){
            Container cont = (Container)c;
            cont.removeContainerListener(this);
            Component[] children = cont.getComponents();
            for(int i = 0; i < children.length; i++){
                removeKeyAndContainerListenerRecursively(children[i]);
            }
        }
    }
    
    //ContainerListener interface
    /** This function is called whenever a Component or a Container is added to another Container belonging to this Dialog */
    public void componentAdded(ContainerEvent e) {
        addKeyAndContainerListenerRecursively(e.getChild());
    }
    
    /** This function is called whenever a Component or a Container is removed from another Container belonging to this Dialog */
    public void componentRemoved(ContainerEvent e) {
        removeKeyAndContainerListenerRecursively(e.getChild());
    }
    // End ContainerListener interface
    
    
    // KeyListener interface
    /** This function is called whenever a Component belonging to this Dialog (or the Dialog itself) gets the KEY_PRESSED event */
    public void keyPressed(KeyEvent e) {
        if(e.getKeyCode() == KeyEvent.VK_ESCAPE){
            // Key pressed is the ESCAPE key. Hide this Dialog.
            setVisible(false);
        }
    }
    
    /** We need the following 2 functions to complete imlementation of KeyListener */
    public void keyReleased(KeyEvent e) {
    }
    
    public void keyTyped(KeyEvent e) {
    }
    // End KeyListener interface
    
}
