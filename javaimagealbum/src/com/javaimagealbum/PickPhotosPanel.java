/*
 * <license>
 * The contents of this file are subject to the Mozilla Public License 
 * Version 1.1 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License 
 * at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an 
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or 
 * implied. See the License for the specific language governing rights 
 * and limitations under the License.
 * 
 * The Original Code is Web Photo Publisher.
 * 
 * The Initial Developer of the Original Code is Mark Roth.  Portions 
 * created by Mark Roth are Copyright (C) 2003 Mark Roth.  
 * All Rights Reserved.
 * 
 * Contributor(s) listed below.
 * </license>
 */

package com.javaimagealbum;

import java.io.*;
import java.util.ResourceBundle;

import javax.swing.*;

import com.javaimagealbum.resources.ResourceFactory;

import java.awt.*;
import java.awt.event.*;

/**
 * Panel that allows the user to configure where the photos
 * are currently stored.
 *
 * @author  Mark Roth
 */
public class PickPhotosPanel 
    extends javax.swing.JPanel 
    implements WizardPanel, ItemListener
{
    static ResourceBundle res = ResourceFactory.getBundle();
//    static ResourceBundle resM = ResourceFactory.getMnemonicBundle();

    /** Creates new form PickFilesPanel */
    public PickPhotosPanel(PublishManager publishManager) {
        this.publishManager = publishManager;
        initComponents ();
        ((FileSelector)pnlFileSelector).addItemListener( this );
        spScroll.getHorizontalScrollBar().setUnitIncrement( 16 );
        spScroll.getVerticalScrollBar().setUnitIncrement( 16 );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblTitle = new javax.swing.JLabel();
        pnlContents = new javax.swing.JPanel();
        tpInstructions = new javax.swing.JTextPane();
        pnlCenter = new javax.swing.JPanel();
        spScroll = new javax.swing.JScrollPane();
        pnlFileSelector = new FileSelector( true );

        pnlControls = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        tpChoiceDescription = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        setBackground(java.awt.Color.white);
        lblTitle.setFont(new java.awt.Font("SansSerif", 1, 14));
        lblTitle.setForeground(new java.awt.Color(0, 153, 153));
        lblTitle.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("PICK_PHOTOS"));
        lblTitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        add(lblTitle, java.awt.BorderLayout.NORTH);

        pnlContents.setLayout(new java.awt.GridBagLayout());

        pnlContents.setBackground(java.awt.Color.white);
        tpInstructions.setEditable(false);
        tpInstructions.setFont(new java.awt.Font("SansSerif", 0, 12));
        tpInstructions.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("PICK_PHOTOS_PANEL_DESCRIPTION"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        pnlContents.add(tpInstructions, gridBagConstraints);

        pnlCenter.setLayout(new java.awt.BorderLayout());

        spScroll.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                spScrollComponentResized(evt);
            }
        });

        pnlFileSelector.setBackground(java.awt.Color.white);
        spScroll.setViewportView(pnlFileSelector);

        pnlCenter.add(spScroll, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 40, 20, 40);
        pnlContents.add(pnlCenter, gridBagConstraints);

        pnlControls.setBackground(java.awt.Color.white);
        btnRefresh.setFont(new java.awt.Font("SansSerif", 0, 12));
        btnRefresh.setMnemonic('r');
        btnRefresh.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("REFRESH_FOLDER"));
        btnRefresh.setToolTipText("Refresh the contents of the selected folder.");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        pnlControls.add(btnRefresh);

        btnBrowse.setFont(new java.awt.Font("SansSerif", 0, 12));
        btnBrowse.setMnemonic('w');
        btnBrowse.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("BROWSE1"));
        btnBrowse.setToolTipText("Browse for folders");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        pnlControls.add(btnBrowse);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlContents.add(pnlControls, gridBagConstraints);

        tpChoiceDescription.setEditable(false);
        tpChoiceDescription.setFont(new java.awt.Font("SansSerif", 0, 12));
        tpChoiceDescription.setText("Selection: None\n\n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 15, 0);
        pnlContents.add(tpChoiceDescription, gridBagConstraints);

        add(pnlContents, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // Get the parent frame:
        Container parent = this;
        while( !((parent = parent.getParent()) instanceof JFrame) );
        
        FileDialog fileDialog = new FileDialog( (Frame)parent, 
            "Browse for Photos Folder", FileDialog.LOAD );
        // If the user has a directory selected, use that directory.
        // If not, then try to use the directory from the photo source.
        // Otherwise, let it use whatever directory it sees fit.
        if( selectedDirectory != null ) {
            fileDialog.setDirectory( selectedDirectory.getAbsolutePath() );
        }
        else {
            File sourceDir = publishManager.getPhotoSource().getSourceDir();
            if( sourceDir != null ) {
                fileDialog.setDirectory( sourceDir.getAbsolutePath() );
            }
        }
        fileDialog.setModal( true );
        fileDialog.setVisible( true );
        
        String directory = fileDialog.getDirectory();
        String filename = fileDialog.getFile();
        if( filename != null ) {
            File result = new File( directory, filename );
            if( !result.isDirectory() ) {
                result = result.getParentFile();
            }
            // First, set selectedDirectory.  Then, try to set it in the
            // tree.  In case the tree setting fails, make sure we still
            // have the desired directory selected.
            tryDirectory( result );            
            ((FileSelector)pnlFileSelector).setSelectedFile( result );
            tryDirectory( result );            
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        ((FileSelector)pnlFileSelector).refreshSelection();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void spScrollComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_spScrollComponentResized
        ((FileSelector)pnlFileSelector).scrollToSelection();
    }//GEN-LAST:event_spScrollComponentResized


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlContents;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JPanel pnlFileSelector;
    private javax.swing.JScrollPane spScroll;
    private javax.swing.JTextPane tpChoiceDescription;
    private javax.swing.JTextPane tpInstructions;
    // End of variables declaration//GEN-END:variables

    private PublishManager publishManager;
    private File selectedDirectory;
    private PhotoSource tempPhotoSource = new PhotoSource();
    
    // We remember this value in case the user clicks back and
    // changes the directory.  We want to warn that captions may be lost.
    private File lastSelectedDirectory = null;

    /**
     * Final directory selection
     */
    private void selectDirectory( File dir ) {
        selectedDirectory = dir;
        PhotoSource source = publishManager.getPhotoSource();
        source.scanDirectory( selectedDirectory );
        Settings.getInstance().setProperty( 
            Constants.DEFAULT_INPUT_DIR,
            dir.getAbsolutePath() );
    }
    
    /**
     * Try this directory, before officially selecting it
     */
    private void tryDirectory( File dir ) {
        selectedDirectory = dir;
        tempPhotoSource.scanDirectory( selectedDirectory );
        updateGUI();
    }
    
    /** Returns true if all required data was filled in for this panel.
     */
    public boolean isSatisfied() {
        int numPhotos = tempPhotoSource.getPhotos().size();
        return numPhotos > 0;
    }
    /** Called when the panel is shown to the user
     */
    public void showPanel() {
        File dir = publishManager.getPhotoSource().getSourceDir();
        ((FileSelector)pnlFileSelector).setSelectedFile( dir );
        tryDirectory( dir );
    }
    /** Called when the panel is hidden from the user
     */
    public void hidePanel(boolean forwardDirection) throws CannotChangePanelException
    {
        if( (lastSelectedDirectory != null) &&
            !lastSelectedDirectory.equals( selectedDirectory ) ) 
        {
            java.awt.Toolkit.getDefaultToolkit().beep();
            int result = JOptionPane.showConfirmDialog( this,
                res.getString("BY_CHANGING"),
                res.getString("WARNING"), JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE );
            switch( result ) {
                case JOptionPane.YES_OPTION:
                    // everything is okay - continue.
                    break;
                case JOptionPane.NO_OPTION:
                    ((FileSelector)pnlFileSelector).setSelectedFile(
                        lastSelectedDirectory );
                    throw new CannotChangePanelException();
            }
        }
        if( forwardDirection ) {
            lastSelectedDirectory = selectedDirectory;
        }
        selectDirectory( selectedDirectory );
    }
    
    public void itemStateChanged(java.awt.event.ItemEvent itemEvent) {
        tryDirectory( (File)itemEvent.getItem() );
    }

    private void updateGUI() {
        if( selectedDirectory == null ) {
            tpChoiceDescription.setText( res.getString("SELECTION")+" "+res.getString("NONE")+"\n\n" );
            btnRefresh.setEnabled( false );
        }
        else {
            btnRefresh.setEnabled( true );
            // Update UI:
            int numPhotos = tempPhotoSource.getPhotos().size();
            tpChoiceDescription.setText( 
                res.getString("SELECTION")+" "+ selectedDirectory.getAbsolutePath() + "\n\n" +
                res.getString("FOUND")+" " + numPhotos + 
                    " " + res.getString("PHOTOS") + 
                    " " + res.getString("IN_THIS_FOLDER") );
        }
    }
}
