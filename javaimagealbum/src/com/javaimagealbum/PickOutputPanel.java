/*
 * <license>
 * The contents of this file are subject to the Mozilla Public License 
 * Version 1.1 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License 
 * at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an 
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or 
 * implied. See the License for the specific language governing rights 
 * and limitations under the License.
 * 
 * The Original Code is Web Photo Publisher.
 * 
 * The Initial Developer of the Original Code is Mark Roth.  Portions 
 * created by Mark Roth are Copyright (C) 2003 Mark Roth.  
 * All Rights Reserved.
 * 
 * Contributor(s) listed below.
 * </license>
 */

package com.javaimagealbum;

import java.io.*;
import java.util.ResourceBundle;

import javax.swing.*;

import com.javaimagealbum.resources.ResourceFactory;

import java.awt.event.*;
import java.awt.*;

/**
 * Allows user to change the order of the files in the list.
 *
 * @author  Mark Roth
 * @author  Mirko Actis
 */
public class PickOutputPanel 
    extends javax.swing.JPanel 
    implements WizardPanel, ItemListener
{
    static ResourceBundle res = ResourceFactory.getBundle();
//    static ResourceBundle resM = ResourceFactory.getMnemonicBundle();

    /** Creates new form ReorderFilesPanel */
    public PickOutputPanel(PublishManager publishManager) {
        this.publishManager = publishManager;
        initComponents ();
        ((FileSelector)pnlFileSelector).addItemListener( this );
        spScroll.getHorizontalScrollBar().setUnitIncrement( 16 );
        spScroll.getVerticalScrollBar().setUnitIncrement( 16 );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblTitle = new javax.swing.JLabel();
        pnlContents = new javax.swing.JPanel();
        tpInstructions = new javax.swing.JTextPane();
        pnlCenter = new javax.swing.JPanel();
        spScroll = new javax.swing.JScrollPane();
        pnlFileSelector = new FileSelector( true );

        pnlControls = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnBrowse = new javax.swing.JButton();
        btnCreateFolder = new javax.swing.JButton();
        tpChoiceDescription = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        setBackground(java.awt.Color.white);
        lblTitle.setFont(new java.awt.Font("SansSerif", 1, 14));
        lblTitle.setForeground(new java.awt.Color(0, 153, 153));
        lblTitle.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("CHOOSE_OUTPUT_DIRECTORY"));
        lblTitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(3, 3, 3, 3));
        add(lblTitle, java.awt.BorderLayout.NORTH);

        pnlContents.setLayout(new java.awt.GridBagLayout());

        pnlContents.setBackground(java.awt.Color.white);
        tpInstructions.setEditable(false);
        tpInstructions.setFont(new java.awt.Font("SansSerif", 0, 12));
        tpInstructions.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("CHOOSE_FOLDER"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        pnlContents.add(tpInstructions, gridBagConstraints);

        pnlCenter.setLayout(new java.awt.BorderLayout());

        pnlCenter.setBackground(java.awt.Color.white);
        spScroll.setBackground(java.awt.Color.white);
        spScroll.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                spScrollComponentResized(evt);
            }
        });

        pnlFileSelector.setBackground(java.awt.Color.white);
        spScroll.setViewportView(pnlFileSelector);

        pnlCenter.add(spScroll, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 40, 20, 40);
        pnlContents.add(pnlCenter, gridBagConstraints);

        pnlControls.setBackground(java.awt.Color.white);
        btnRefresh.setFont(new java.awt.Font("SansSerif", 0, 12));
        btnRefresh.setMnemonic(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/MnemonicResource").getString("Refresh_Folder").charAt(0));
        btnRefresh.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("REFRESH_FOLDER"));
        btnRefresh.setToolTipText("Refresh the contents of the selected folder.");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        pnlControls.add(btnRefresh);

        btnBrowse.setFont(new java.awt.Font("SansSerif", 0, 12));
        btnBrowse.setMnemonic(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/MnemonicResource").getString("Browse").charAt(0));
        btnBrowse.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("BROWSE"));
        btnBrowse.setToolTipText("Browse for folders");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        pnlControls.add(btnBrowse);

        btnCreateFolder.setFont(new java.awt.Font("SansSerif", 0, 12));
        btnCreateFolder.setMnemonic('c');
        btnCreateFolder.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("CREATE_NEW_FOLDER"));
        btnCreateFolder.setToolTipText("Create a new folder inside selected folder");
        btnCreateFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFolderActionPerformed(evt);
            }
        });

        pnlControls.add(btnCreateFolder);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        pnlContents.add(pnlControls, gridBagConstraints);

        tpChoiceDescription.setEditable(false);
        tpChoiceDescription.setFont(new java.awt.Font("SansSerif", 0, 12));
        tpChoiceDescription.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("SELECTION_NONE"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        pnlContents.add(tpChoiceDescription, gridBagConstraints);

        add(pnlContents, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // Get the parent frame:
        Container parent = this;
        while( !((parent = parent.getParent()) instanceof JFrame) );
        
        FileDialog fileDialog = new FileDialog( (Frame)parent, 
            "Browse for Photos Folder", FileDialog.SAVE );
        // If the user has a directory selected, use that directory.
        // If not, then try to use the directory from the photo source.
        // Otherwise, let it use whatever directory it sees fit.
        if( selectedDirectory != null ) {
            fileDialog.setDirectory( selectedDirectory.getAbsolutePath() );
        }
        else {
            File sourceDir = publishManager.getOutputDirectory();
            if( sourceDir != null ) {
                fileDialog.setDirectory( sourceDir.getAbsolutePath() );
            }
        }
        fileDialog.setModal( true );
        fileDialog.setVisible( true );
        
        String directory = fileDialog.getDirectory();
        String filename = fileDialog.getFile();
        if( filename != null ) {
            File result = new File( directory, filename );
            if( !result.isDirectory() ) {
                result = result.getParentFile();
            }
            // First, set selectedDirectory.  Then, try to set it in the
            // tree.  In case the tree setting fails, make sure we still
            // have the desired directory selected.
            tryDirectory( result );            
            ((FileSelector)pnlFileSelector).setSelectedFile( result );
            tryDirectory( result );            
        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        ((FileSelector)pnlFileSelector).refreshSelection();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void spScrollComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_spScrollComponentResized
        ((FileSelector)pnlFileSelector).scrollToSelection();
    }//GEN-LAST:event_spScrollComponentResized

    private void btnCreateFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFolderActionPerformed
        if( selectedDirectory != null ) {
            // Add your handling code here:
            String newFolderName = JOptionPane.showInputDialog( this, 
                "Your new folder will be created inside\n" +
                "of the currently selected folder:\n\n" + 
                "    " + selectedDirectory.getAbsolutePath() + "\n\n" +
                "Enter the name of the new folder and click OK:",
                "Create New Folder",
                JOptionPane.QUESTION_MESSAGE );
            if( newFolderName != null ) {
                File newFolder = new File( selectedDirectory, newFolderName );
                boolean createSuccess = newFolder.mkdirs();
                if( !createSuccess ) {
                    couldNotCreateFolder();
                }
                ((FileSelector)pnlFileSelector).refreshSelection();
                if( createSuccess ) {
                    tryDirectory( newFolder );
                    ((FileSelector)pnlFileSelector).setSelectedFile( 
                        newFolder ); 
                }
            }
        }
    }//GEN-LAST:event_btnCreateFolderActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnCreateFolder;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlCenter;
    private javax.swing.JPanel pnlContents;
    private javax.swing.JPanel pnlControls;
    private javax.swing.JPanel pnlFileSelector;
    private javax.swing.JScrollPane spScroll;
    private javax.swing.JTextPane tpChoiceDescription;
    private javax.swing.JTextPane tpInstructions;
    // End of variables declaration//GEN-END:variables

    private PublishManager publishManager;
    private File selectedDirectory;
    
    /** Returns true if all required data was filled in for this panel.
     */
    public boolean isSatisfied() {
        return selectedDirectory != null;
    }

    private void selectDirectory( File dir ) {
        boolean process = false;
        
        if( !dir.exists() ) {
            Toolkit.getDefaultToolkit().beep();
            int result = JOptionPane.showConfirmDialog( this, 
                res.getString( "FOLDER_NOT_EXIST" ),
                res.getString( "QUESTION" ), JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE );
            if( result == JOptionPane.YES_OPTION ) {
                process = true;
                if( !dir.mkdirs() ) {
                    process = false;
                    couldNotCreateFolder();
                }
            }
        }
        else {
            process = true;
        }
        
        if( process ) {
            selectedDirectory = dir;
            publishManager.setOutputDirectory( dir );
            updateGUI();
        }
    }
    
    private void couldNotCreateFolder() {
        Toolkit.getDefaultToolkit().beep();
        JOptionPane.showMessageDialog( this, 
            res.getString("COULD_NOT_CREATE_FOLDER"),
            res.getString("FOLDER_NOT_CREATED"),
            JOptionPane.ERROR_MESSAGE );
    }

    private void tryDirectory( File dir ) {
//        boolean process = false;
        
        selectedDirectory = dir;
        
        updateGUI();
    }

    private void updateGUI() {
        String selection = null;
        if( selectedDirectory != null) {
            selection = selectedDirectory.getAbsolutePath();
        }
        if( selection == null ) selection = "None";
        // Update UI:
        tpChoiceDescription.setText( res.getString("SELECTION")+" " + selection );
        btnCreateFolder.setEnabled( selection != null );
        btnRefresh.setEnabled( selection != null );
    }
    
    /** 
     * Called when the panel is shown to the user
     */
    public void showPanel() {
        File dir = publishManager.getOutputDirectory();
        while( (dir != null) && !dir.exists() ) {
            dir = dir.getParentFile();
        }
        ((FileSelector)pnlFileSelector).setSelectedFile( dir ); 
        tryDirectory( dir );
    }

    /** 
     * Called when the panel is hidden from the user
     */
    public void hidePanel(boolean forwardDirection) 
        throws CannotChangePanelException 
    {
        if( forwardDirection ) {
            // Check to make sure we didn't select the input directory.
            if( selectedDirectory.equals( 
                publishManager.getPhotoSource().getSourceDir() ) ) 
            {
                Toolkit.getDefaultToolkit().beep();
                int result = JOptionPane.showConfirmDialog( this, 
                    res.getString( "CHOOSING_SAME_OUTPUT_FOLDER" ),
                    res.getString( "WARNING" ),
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE );
                if( result == JOptionPane.NO_OPTION ) {
                    throw new CannotChangePanelException();
                }
            }
            else if( selectedDirectory.exists() ) {
                // Check to make sure there are no files in output folder
                // try {
                String files[] = selectedDirectory.list();
                boolean atLeastOneFile = false;
                for( int i = 0; !atLeastOneFile && (i < files.length); i++ ) {
                    atLeastOneFile = new File( selectedDirectory, 
                        files[i] ).isFile();
                }

                if( atLeastOneFile ) {
                    Toolkit.getDefaultToolkit().beep();
                    int result = JOptionPane.showConfirmDialog( this,
                        res.getString( "FOLDER_ALREADY_CONTAINS" ),
                        res.getString( "WARNING" ),
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE );

                    if( result == JOptionPane.NO_OPTION ) {
                        throw new CannotChangePanelException();
                    }
                }
                //catch( IOException e ) {
                //    JOptionPane.showMessageDialog( this,
                //        "The folder you selected could not be accessed.\n" +
                //        "Please select a different folder.",
                //        "Could not access selected folder",
                //        JOptionPane.ERROR_MESSAGE );
                //    throw new CannotChangePanelException();
                //}
            }
        }
        
        selectDirectory( selectedDirectory );
    }
    
    public void itemStateChanged(java.awt.event.ItemEvent itemEvent) {
        tryDirectory( (File)itemEvent.getItem() );
    }
    
}
