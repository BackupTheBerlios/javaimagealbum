/*
 * <license>
 * The contents of this file are subject to the Mozilla Public License 
 * Version 1.1 (the "License"); you may not use this file except in 
 * compliance with the License.  You may obtain a copy of the License 
 * at http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an 
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or 
 * implied. See the License for the specific language governing rights 
 * and limitations under the License.
 * 
 * The Original Code is Web Photo Publisher.
 * 
 * The Initial Developer of the Original Code is Mark Roth.  Portions 
 * created by Mark Roth are Copyright (C) 2003 Mark Roth.  
 * All Rights Reserved.
 * 
 * Contributor(s) listed below.
 * </license>
 */

package com.javaimagealbum;

import java.awt.*;
import java.util.ResourceBundle;

import javax.swing.*;

import com.javaimagealbum.resources.ResourceFactory;

/**
 * Main frame for web photo publisher
 *
 * @author  Mark Roth
 * @author  Mirko Actis
 */
public class JavaImageAlbumFrame extends javax.swing.JFrame {
    static ResourceBundle res = ResourceFactory.getBundle();
    static ResourceBundle resM = ResourceFactory.getMnemonicBundle();

    private static final Package PACKAGE = JavaImageAlbumFrame.class.getPackage(); 

    /** Creates new form JavaImageAlbumFrame */
    public JavaImageAlbumFrame( ) {
        
        initComponents ();
        setIconImage( new javax.swing.ImageIcon(
            getClass().getResource(
            "/com/javaimagealbum/images/icon.png")
            ).getImage());
        pack ();
        
/*        System.out.println("Mirko Name="+PACKAGE.getName());
        System.out.println("Mirko Title="+PACKAGE.getImplementationTitle());
        System.out.println("Mirko Version="+PACKAGE.getImplementationVersion());
        System.out.println("Mirko Vendor="+PACKAGE.getImplementationVendor()); */
        setTitle( getTitle() + " - "+res.getString("VERSION")+" " + PACKAGE.getImplementationVersion() );

        initPanels();
        nextPanel();
        startButtonUpdaterThread();
        
        // Display license agreement if this is the first time.
        boolean licensed = Settings.getInstance().getProperty( 
            Constants.LICENSE_AGREED, "false" ).toLowerCase().equals( 
            PACKAGE.getImplementationVersion() );
        if( !licensed ) {
            LicenseAgreementDialog dialog = new LicenseAgreementDialog( 
                this, true );
            dialog.setLocationRelativeTo( null );
            dialog.show();
            if( dialog.getAgree() ) {
                Settings.getInstance().setProperty(
                    Constants.LICENSE_AGREED, PACKAGE.getImplementationVersion() );
            }
            else {
                JOptionPane.showMessageDialog(
                        this,
                        res.getString("THANKS_FOR"),
                        res.getString("LICENSE_REFUSED"),
                        JOptionPane.INFORMATION_MESSAGE );
//                JOptionPane.showMessageDialog(
//                    this, 
//                    "Thank you for downloading Java Image Album.\n\n" +
//                    "To use this software you must agree to the license\n" +
//                    "agreement.  To do so, simply start Java Image Album\n" +
//                    "again, and click \"I Agree\" when prompted.",
//                    "License Agreement Refused", 
//                    JOptionPane.INFORMATION_MESSAGE );
                System.exit( 1 );
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlCurrent = new javax.swing.JPanel();
        pnlButtons = new javax.swing.JPanel();
        btnRestart = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        pnlSideBar = new javax.swing.JPanel();
        lblSideBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Java Image Album");
        setBackground(java.awt.Color.white);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pnlCurrent.setLayout(new java.awt.GridLayout(1, 1));

        pnlCurrent.setBackground(java.awt.Color.white);
        pnlCurrent.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        pnlCurrent.setPreferredSize(new java.awt.Dimension(600, 400));
        getContentPane().add(pnlCurrent, java.awt.BorderLayout.CENTER);

        pnlButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        pnlButtons.setBackground(java.awt.Color.white);
        btnRestart.setMnemonic(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/MnemonicResource").getString("Restart").charAt(0));
        btnRestart.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("RESTART"));
        btnRestart.setActionCommand("res.getString(\"RESTART\")");
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        pnlButtons.add(btnRestart);

        btnBack.setMnemonic(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/MnemonicResource").getString("Back").charAt(0));
        btnBack.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("BACK"));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        pnlButtons.add(btnBack);

        btnNext.setMnemonic(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/MnemonicResource").getString("Next").charAt(0));
        btnNext.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("NEXT"));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        pnlButtons.add(btnNext);

        btnCancel.setMnemonic(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/MnemonicResource").getString("Cancel").charAt(0));
        btnCancel.setText(java.util.ResourceBundle.getBundle("com/javaimagealbum/resources/Resource").getString("CANCEL"));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        pnlButtons.add(btnCancel);

        getContentPane().add(pnlButtons, java.awt.BorderLayout.SOUTH);

        pnlSideBar.setLayout(new java.awt.GridBagLayout());

        pnlSideBar.setBackground(java.awt.Color.white);
        lblSideBar.setBackground(new java.awt.Color(0, 192, 192));
        lblSideBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/javaimagealbum/images/sidebar.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlSideBar.add(lblSideBar, gridBagConstraints);

        getContentPane().add(pnlSideBar, java.awt.BorderLayout.WEST);

    }
    // </editor-fold>//GEN-END:initComponents

    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
        restartPanel();
    }//GEN-LAST:event_btnRestartActionPerformed

  private void btnCancelActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
      exit();
  }//GEN-LAST:event_btnCancelActionPerformed

  private void btnBackActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      backPanel();
  }//GEN-LAST:event_btnBackActionPerformed

  private void btnNextActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
      nextPanel();
  }//GEN-LAST:event_btnNextActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exit();
    }//GEN-LAST:event_exitForm

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnRestart;
    private javax.swing.JLabel lblSideBar;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlCurrent;
    private javax.swing.JPanel pnlSideBar;
    // End of variables declaration//GEN-END:variables

    private PublishManager publishManager = new PublishManager();
    private int currentPanelIndex = -1;
    private JPanel[] panels = null;
    private JPanel currentPanel = null;
    
    // Create all panels
    private void initPanels() {
        boolean skipIntro = Settings.getInstance().getProperty( 
            Constants.SKIP_INTRO, "false" ).toLowerCase().equals( "true" );
        
        panels = new JPanel[7];
        panels[0] = new IntroPanel();
        panels[1] = new PickPhotosPanel( publishManager );
        panels[2] = new RenameAndDescribePanel( publishManager );
        panels[3] = new PickOutputPanel( publishManager );
        panels[4] = new OutputDescriptionPanel( publishManager );
        panels[5] = new OutputOptionsPanel( publishManager );
        panels[6] = new SummaryPanel( publishManager );
        
        if( skipIntro ) {
            JPanel[] tmp = panels;
            panels = new JPanel[5];
            for( int i = 1; i < tmp.length; i++ ) {
                panels[i-1] = tmp[i];
            }
        }

        currentPanelIndex = -1;
    }
    
    // Advance to the next panel
    private void nextPanel() {
        if( (currentPanel == null) || 
            ((WizardPanel)currentPanel).isSatisfied() ) 
        {
            int prevPanelIndex = currentPanelIndex;
            try {
                currentPanelIndex++;
                if( currentPanelIndex >= panels.length ) {
                    currentPanelIndex = panels.length - 1;
                }
                updateButtons();
                changePanel( panels[currentPanelIndex], true );
            }
            catch( CannotChangePanelException e ) {
                currentPanelIndex = prevPanelIndex;
                updateButtons();
            }
        }
    }
    
    // Go to first panel
    private void restartPanel() {
        int prevPanelIndex = currentPanelIndex;
        currentPanelIndex = 0;
        try {
            updateButtons();
            btnCancel.setText( res.getString("CANCEL") );
            changePanel( panels[0], false );
            publishManager = new PublishManager();
        } catch (CannotChangePanelException e) {
            currentPanelIndex = prevPanelIndex;
            updateButtons();
        }
    }
    
    // Go back one panel
    private void backPanel() {
        int prevPanelIndex = currentPanelIndex;
        try {
            currentPanelIndex--;
            if( currentPanelIndex < 0 ) {
                currentPanelIndex = 0;
            }
            updateButtons();
            changePanel( panels[currentPanelIndex], false );
        }
        catch( CannotChangePanelException e ) {
            currentPanelIndex = prevPanelIndex;
            updateButtons();
        }
    }
    
    // Update the buttons based on the panel index
    private void updateButtons() {
        WizardPanel wizPanel = (WizardPanel)currentPanel;
        btnBack.setEnabled( currentPanelIndex > 0 );
        btnNext.setEnabled( 
            ( (wizPanel != null) && wizPanel.isSatisfied() ) &&
            ( currentPanelIndex < (panels.length - 1) )
        );
        if( publishManager.isGenerationComplete() ) {
            btnRestart.setEnabled( 
                ( currentPanelIndex == (panels.length - 1) ));
            btnCancel.setText( res.getString("CLOSE") );
        }
    }
    
    // Change the current panel selection
    private void changePanel( JPanel panel, boolean forwardDirection ) 
        throws CannotChangePanelException
    {
        if( currentPanel != null ) {
            if( currentPanel instanceof WizardPanel ) {
                ((WizardPanel)currentPanel).hidePanel( forwardDirection );
            }
            currentPanel.setVisible( false );
            pnlCurrent.remove( currentPanel );
        }
        currentPanel = panel;
        pnlCurrent.add (panel);
        panel.setVisible( true );
        if( panel instanceof WizardPanel ) {
            ((WizardPanel)panel).showPanel();
        }
   }

    // Starts a thread that continuously updates the status
    // of the buttons
    private void startButtonUpdaterThread() {
        new Thread() {
            public void run() {
                while( true ) {
                    try {
                        Thread.sleep( 250 );
                    }
                    catch( InterruptedException e ) {
                    }
                    updateButtons();
                }
            }
        }.start();
    }
    
    /**
     * Check to see if we shouldn't exit because the user has unsaved
     * captions.
     */
    private boolean checkDontExitUnsavedCaptions() {
        boolean dontExit = false;
        // First, verify that we don't have any unsaved captions (that
        // the user might want to save)
        if( publishManager.isUnsavedCaptions() &&
            publishManager.getStoreCaptions() ) 
        {
            Toolkit.getDefaultToolkit().beep();
            int result = JOptionPane.showConfirmDialog( this,
                "You have edited captions for one or more photos,\n" +
                "and you have indicated that you would like them\n" +
                "to be remembered.\n\n" +
                "Would you like to save them before exiting?\n" +
                "(Select Cancel if you don't want to exit)",
                "Unsaved Captions",
                JOptionPane.YES_NO_CANCEL_OPTION, 
                JOptionPane.QUESTION_MESSAGE );
            
            if( result == JOptionPane.YES_OPTION ) {
                publishManager.saveCaptions();
                
                // Check if they are still unsaved.
                if( publishManager.isUnsavedCaptions() ) {
                    result = JOptionPane.showConfirmDialog( this,
                        "One or more captions could not be saved.\n" +
                        "Do you want to exit anyway?",
                        "Warning - Could Not Save Captions",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE );
                    if( result == JOptionPane.NO_OPTION ) {
                        dontExit = true;
                    }
                }
            }
            else if( result == JOptionPane.CANCEL_OPTION ) {
                dontExit = true;
            }
        }
        
        return dontExit;
    }
   
    /**
     * Check to see if we shouldn't exit because the user has unsaved
     * photos.
     */
    private boolean checkDontExitUnsavedPhotos() {
        boolean dontExit = false;
        
        if( publishManager.isUnsavedPhotos() ) {
            Toolkit.getDefaultToolkit().beep();
            int result = JOptionPane.showConfirmDialog( this,
                "No output has been generated yet.\n\n" +
                "Are you sure you want to exit?",
                "Nothing Generated", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE );
            if( result == JOptionPane.NO_OPTION ) {
                dontExit = true;
            }
        }
        
        return dontExit;
    }
    
    /**
     * To support older scripts:
     */
    public static void main( String[] args ) {
        JOptionPane.showMessageDialog( null,
            "Your startup script is out of date.\n" + 
            "Please update your startup script to execute the following:\n\n" +
            "  java -jar webphotopublish.jar\n\n" +
            "Thank you, and sorry for the inconvenience.",
            "Please Update Startup Script",
            JOptionPane.ERROR_MESSAGE );
        System.exit( 1 );
    }
    
    private void exit() {
        boolean dontExit = false;

        dontExit = checkDontExitUnsavedCaptions();
        dontExit = dontExit || checkDontExitUnsavedPhotos();

        if( !dontExit ) {
            // If we haven't found a reason not to exit, then exit.
            System.exit( 0 );
        }
    }

}
